import requests
import argparse
import datetime

import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def get_currentTime():
    return "[" + datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + "]"


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--log", help="Path to the output log.", type=str)
    parser.add_argument("--eno-start", help="Start of ENO.", type=int)
    parser.add_argument("--pdf-output", help="Output path for downloaded PDFs", type=str)
    return parser.parse_args()


def download_file(args, eno):
    url = "https://eportal.army.lk/eportal/public/pay_slip/2022/Oct/" + str(eno) + ".PDF"
    with requests.get(url, stream=True, verify=False) as pay_req:
        if pay_req.status_code != 200:
            return pay_req.status_code
        with open(args.pdf_output + '\\' + str(eno) + '.PDF', 'wb') as pdfOutput:
            for ch in pay_req.iter_content(chunk_size=500):
                pdfOutput.write(ch)
        return pay_req.status_code


def open_log(log_path):
    log_file = open(log_path, 'a')
    return log_file


def begin_download():
    args = parse_args()
    eno_value = None
    log_file = open_log(args.log)
    while True:
        if eno_value is None:
            eno_value = args.eno_start
        out = get_currentTime() + ' ENO : ' + str(eno_value) + ', '
        print(out, end='')
        download_code = download_file(args, eno_value)
        print('Status : ' + str(download_code))
        log_file.write(out + 'Status : ' + str(download_code) + '\n')
        log_file.flush()
        eno_value = eno_value + 1


if __name__ == '__main__':
    begin_download()
